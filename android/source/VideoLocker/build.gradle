import org.yaml.snakeyaml.*

apply plugin: 'com.android.application'
apply plugin: "jacoco"
apply plugin: 'io.fabric'
apply plugin: 'newrelic'

repositories {
    mavenLocal()
    maven { url 'https://maven.fabric.io/public' }
    //Included for NewRelic
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.14'

        classpath 'com.android.tools.build:gradle:1.0.0'
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.+'

        //Included for NewRelic
        classpath "com.newrelic.agent.android:agent-gradle-plugin:4.+"
    }
}

class Configuration {
    def dir = 'default_config'
    def projectDir = '.'
    def configFiles = []

    def ios(setup) {
        // do nothing. This is an android app. This is just to be compatible with
        // the iOS config setup.
    }

    def android(setup) {
        setup.delegate = this
        setup()
    }

    def getConfigPaths() {
        def result = []
        for(configName in configFiles) {
            result.add(projectDir + '/' + dir + '/' + configName)
        }
        return result
    }

    // Loads our config YAML files, overwriting keys found in multiple files
    // with the latest one in the list
    def loadConfig() {
        def yaml = new Yaml()
        def properties = [:]
        for(path in configPaths) {
            try {
                def dict = yaml.load(new FileInputStream(path))
                if(dict != null) {
                    properties = properties + dict
                }
            }
            catch(FileNotFoundException e) {
                println path + " not found. Skipping."
            }
        }
        return properties
    }

    def saveProcessedConfig(config) {
        def path = projectDir + '/assets/config'
        new File(path).mkdirs()
        def yaml = new Yaml()
        def writer = new FileWriter(path + '/config.yaml')
        yaml.dump(config, writer)
    }

    def saveResources(config) {

        // Fabric requires you to populate a key file
        // Using 'apiKey' instead of passing it in the meta-data
        // is undocumented, but is necessary because it tries to read
        // the meta-data at compile time so resource references don't work
        def fabric_key = config.get('FABRIC_KEY') ?: ""
        def fabric_secret = config.get('FABRIC_BUILD_SECRET')
        if(fabric_key != null && fabric_secret != null) {
            def crashlyticsPath = projectDir + '/crashlytics.properties'
            def writer = new FileWriter(crashlyticsPath)
            writer.write(
"""
apiSecret=$fabric_secret
apiKey=$fabric_key
""")
            writer.close()
        }
    }

}

project.ext.edx = new Configuration()
project.ext.edx.projectDir = projectDir.path

try {
    apply from: projectDir.path + '/edx.properties'
    apply from: projectDir.path + '/' + (edx.dir + '/' + 'edx.properties')
}
catch(GradleException e) {
    println "Could not load edx.properties, using default configuration."
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.facebook.android:facebook-android-sdk:3.20.+'
    compile 'com.google.android.gms:play-services:6.5.+'

    //Crashlytics Kit
    compile('com.crashlytics.sdk.android:crashlytics:2.2.0@aar') {
        transitive = true
    }

    //New Relic Integration
    compile 'com.newrelic.agent.android:android-agent:4.+'

    // test project configuration
    androidTestCompile("org.mockito:mockito-core:1.9.5") {
        exclude group: 'org.hamcrest'
    }
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
}

configurations {
    // to avoid double inclusion of support libraries
    all*.exclude group: 'com.android.support', module: 'support-v4'
}

android {

    signingConfigs {
        releasekey {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "org.edx.mobile"
        // minimum version is Android 4.0
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 40
        versionName "1.0.03"
        // test configuration
        testApplicationId 'org.edx.mobile.test'
        testInstrumentationRunner 'org.edx.mobile.test.edXInstrumentRunner'
        testHandleProfiling true
        testFunctionalTest true
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        // instrumentTest.setRoot('tests')
        androidTest {
            setRoot('androidTest')
        }

        // code coverage with Jacoco
        jacoco {
            version = "0.7.1.201405082137"
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
    }

    productFlavors {
        prod {
            def config = edx.loadConfig()
            ext.enableCrashlytics = config.get('FABRIC_KEY') != null

            versionCode 40
            versionName '1.0.03'
            minSdkVersion 14
            targetSdkVersion 21
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            signingConfig signingConfigs.releasekey
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'APK LICENSE.txt'
    }
}

task printConfigPath << {
    println "Your current configuration path is " + edx.dir
}

task printConfigFiles << {
    println "You are loading configuration data from the following:"
    for(path in edx.configPaths) {
        println "\t" + path
    }
}

task printConfig << {
    def config = edx.loadConfig()

    def options = new DumperOptions()
    options.prettyFlow = true

    def yaml = new Yaml(options)

    println "Your current configuration is:"
    println yaml.dump(config)
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def taskName = "applyConfig" + variantName
    def configureTask = project.task(taskName) << {
        def config = edx.loadConfig()
        edx.saveProcessedConfig(config)
        edx.saveResources(config)
    }
    def generateTask = project.tasks.getByName("generate" + variantName + "Resources")
    generateTask.dependsOn(configureTask)

    tasks.all {task ->
        if(task.name.startsWith("fabric")) {
            task.mustRunAfter(configureTask)
        }
    }
}
