import org.edx.builder.TaskHelper

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.14'

        classpath 'com.android.tools.build:gradle:1.3.0'
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.+'

        //Included for NewRelic
        classpath "com.newrelic.agent.android:agent-gradle-plugin:5.3.1"

    }
}


apply plugin: 'edxapp'
edx {
    platform = ANDROID
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'newrelic'

apply from: 'jacoco.gradle'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}


class AndroidHelper {

    def saveProcessedConfig(project, config) {
        def path = project.file('assets/config')
        path.mkdirs()
        def jsonWriter = new FileWriter(path.absolutePath + '/config.json')
        def builder = new groovy.json.JsonBuilder(config)
        jsonWriter.withWriter {
            builder.writeTo(it)
        }
    }

    def saveResources(project, config) {
        // Fabric requires you to populate a key file
        // Using 'apiKey' instead of passing it in the meta-data
        // is undocumented, but is necessary because it tries to read
        // the meta-data at compile time so resource references don't work
        def fabric = config.get('FABRIC');
        if (fabric != null) {
            def fabric_key = fabric.get('FABRIC_KEY')
            def fabric_secret = fabric.get('FABRIC_BUILD_SECRET')
            if (fabric_key != null && fabric_secret != null) {
                def crashlyticsFile = project.file('crashlytics.properties')
                def writer = new FileWriter(crashlyticsFile)
                writer.write(
                        """
apiSecret=$fabric_secret
apiKey=$fabric_key
""")
                writer.close()
            }
        }
    }

}

dependencies {
    compile ('com.getbase:floatingactionbutton:1.3.0') {
        exclude module: 'support-annotations'
    }
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.facebook.android:facebook-android-sdk:3.22.+'
    compile 'com.google.android.gms:play-services-base:7.8.0'
    compile 'com.google.android.gms:play-services-plus:7.8.0'
    compile 'com.google.android.gms:play-services-identity:7.8.0'
    compile 'com.google.android.gms:play-services-analytics:7.8.0'
    compile 'com.google.android.gms:play-services-gcm:7.8.0'
    compile 'com.google.android.gms:play-services-location:7.8.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.squareup.phrase:phrase:1.0.3'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'it.sephiroth.android.library.imagezoom:imagezoom:1.0.5'

    // Segment Library
    compile('com.segment.analytics.android:analytics-core:3.2.0@aar') {
        // following line fixes this error "more than one library with package name com.google.android.gms"
        // https://github.com/segmentio/analytics-android/issues/156
        exclude module: 'play-services-base'
        transitive = true
    }
    compile('com.segment.analytics.android:analytics-integration-google-analytics:3.2.0@aar') {
        transitive = true
    }

    //Crashlytics Kit
    compile('com.crashlytics.sdk.android:crashlytics:2.2.0@aar') {
        transitive = true
    }

    //New Relic Integration
    compile 'com.newrelic.agent.android:android-agent:5.3.1'

    // Parse notification service
    compile 'com.parse:parse-android:1.10.2'
    compile 'com.parse.bolts:bolts-android:1.2.1'

    //Include DI framework
    compile 'org.roboguice:roboguice:3.+'
    provided 'org.roboguice:roboblender:3.+'
    provided 'org.roboguice:roboblender:3.0.1'

    // For the optional Nullable annotation
    compile 'com.android.support:support-annotations:22.2.0'

    // test project configuration
     testCompile 'junit:junit:4.12'
     testCompile ("org.mockito:mockito-core:1.9.5"){
         exclude group: 'org.hamcrest'
      }
     testCompile "org.robolectric:robolectric:3.0"
     testCompile "org.robolectric:shadows-support-v4:3.0"
     testCompile "org.robolectric:shadows-multidex:3.0"
    /**
     * Adding the jars statically because the assertj-android
     * module is only available in Maven Central as an AAR,
     * and there is a bug in Android Studio where it doesn't
     * allow compiling AARs for unit testing.
     * http://b.android.com/66841
     * https://github.com/square/assertj-android/issues/110
     */
     testCompile fileTree(dir: 'libs/test', include: '*.jar')

    testCompile("org.mockito:mockito-core:1.9.5") {
        exclude group: 'org.hamcrest'
    }
    testCompile 'com.squareup.okhttp:mockwebserver:2.5.0'
}

configurations {
    // I believe it was a wrong configuration at project level before.
   // all*.exclude group: 'com.android.support', module: 'support-v4'
}

android {
    def config = new TaskHelper().loadConfig(project)

    signingConfigs {
        releasekey {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    compileSdkVersion 21
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "org.edx.mobile"
        // minimum version is Android 4.0
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 71
        versionName "1.0.09"

        renderscriptTargetApi 22
        renderscriptSupportModeEnabled true

        // test configuration
        testApplicationId 'org.edx.mobile.test'
        testInstrumentationRunner 'org.edx.mobile.test.edXInstrumentRunner'
        testHandleProfiling true
        testFunctionalTest true

        // Enabling multidex support.
        multiDexEnabled true

        manifestPlaceholders = [ supportsRtl:"false"]

        def platformName = config.get('PLATFORM_NAME')
        resValue "string", "platform_name", platformName
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml.
        // This moves them out of default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
        disable 'MissingTranslation'
    }

    productFlavors {
        prod {
            def fabric = config.get('FABRIC')
            if (fabric != null) {
                ext.enableCrashlytics = fabric.get('FABRIC_KEY') != null
            }
        }
        dev {
            minSdkVersion 21 // Disables multidex to drastically speed up build: https://developer.android.com/tools/building/multidex.html#dev-build
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            pseudoLocalesEnabled true // Set device language to "en_XA" to test glyphs, or "ar_XB" to test RTL support
            manifestPlaceholders = [ supportsRtl:"true"]
        }
        coverage.initWith(buildTypes.debug)
        coverage {
            testCoverageEnabled = true // Only set to "true" when needed due to debugger issue: https://code.google.com/p/android/issues/detail?id=123771
        }

        release {
            signingConfig signingConfigs.releasekey
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'APK LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    testOptions { 
         unitTests.all {
             maxHeapSize '1024m'
             jvmArgs '-XX:MaxPermSize=512m'
         }
    }
}


android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def taskName = "applyConfig" + variantName
    def configureTask = project.task(taskName) << {
        def taskHelper = new TaskHelper()
        def helper = new AndroidHelper()
        def config = taskHelper.loadConfig(project)
        helper.saveProcessedConfig(project, config)
        helper.saveResources(project, config)
    }
    def generateTask = project.tasks.getByName("generate" + variantName + "Resources")
    generateTask.dependsOn(configureTask)

    tasks.all {task ->
        if (task.name.startsWith("fabric")) {
            task.mustRunAfter(configureTask)
        }
        if (task.name.startsWith("test")) {
            task.mustRunAfter(configureTask)
        }
    }
}
